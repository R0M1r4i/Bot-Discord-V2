import discord
from discord.ext import commands
import asyncio
import yt_dlp
import os
import time
from dotenv import load_dotenv
from audio_config import (
    get_ytdl_options, 
    get_ffmpeg_options, 
    log_debug, 
    format_duration, 
    validate_audio_url,
    ERROR_MESSAGES,
    PERFORMANCE_CONFIG
)

# Cargar variables de entorno
load_dotenv()

# Cola de reproducci√≥n global
song_queue = []
voice_client = None
current_song = None
is_processing = False
last_activity = time.time()

# Usar configuraci√≥n optimizada
YTDL_OPTIONS = get_ytdl_options(debug=False)
# Crear instancia de yt-dlp
ydl = yt_dlp.YoutubeDL(YTDL_OPTIONS)

# Crear instancia del bot
intents = discord.Intents.default()
intents.message_content = True
intents.guilds = True
intents.voice_states = True
bot = commands.Bot(command_prefix='!', intents=intents)

# Funci√≥n para obtener la fuente de audio usando yt-dlp
async def get_audio_source(url):
    global last_activity
    last_activity = time.time()
    
    loop = asyncio.get_running_loop()
    start_time = time.time()
    
    try:
        log_debug(f"Iniciando extracci√≥n para: {url[:50]}...", "extraction")
        
        # Extraer informaci√≥n sin descargar con timeout
        data = await asyncio.wait_for(
            loop.run_in_executor(None, lambda: ydl.extract_info(url, download=False)),
            timeout=PERFORMANCE_CONFIG['extraction_timeout']
        )
        
        # Si es una playlist, tomar el primer elemento
        if 'entries' in data:
            if not data['entries']:
                log_debug("La playlist est√° vac√≠a", "extraction")
                return None, None, None, None
            data = data['entries'][0]
        
        # Verificar que tenemos los datos necesarios
        if not data:
            log_debug("No se pudieron extraer datos del video", "extraction")
            return None, None, None, None
            
        audio_url = data.get('url')
        title = data.get('title', 'T√≠tulo desconocido')
        duration = data.get('duration')
        uploader = data.get('uploader', 'Canal desconocido')
        
        # Verificar que tenemos una URL de audio v√°lida
        if not validate_audio_url(audio_url):
            log_debug("URL de audio no v√°lida", "extraction")
            return None, None, None, None
        
        extraction_time = time.time() - start_time
        log_debug(f"Extracci√≥n exitosa en {extraction_time:.2f}s: {title}", "extraction")
        
        return audio_url, title, duration, uploader
        
    except asyncio.TimeoutError:
        log_debug(f"Timeout en extracci√≥n despu√©s de {PERFORMANCE_CONFIG['extraction_timeout']}s", "extraction")
        return None, None, None, None
    except Exception as e:
        log_debug(f"Error en extracci√≥n: {e}", "extraction")
        return None, None, None, None

async def connect_to_voice(ctx):
    global voice_client
    channel = ctx.author.voice.channel
    if not channel:
        await ctx.send("¬°√önete a un canal de voz primero!")
        return None
    if voice_client is None or not voice_client.is_connected():
        try:
            voice_client = await channel.connect()
        except discord.ClientException:
            await ctx.send("Ya estoy conectado a un canal de voz.")
            return voice_client
        except discord.opus.OpusNotLoaded:
            await ctx.send("La librer√≠a opus no est√° cargada. Aseg√∫rate de tener libopus instalado.")
            return None
    elif voice_client.channel != channel:
        await voice_client.move_to(channel)
    return voice_client

async def play_next(ctx):
    global song_queue, voice_client, current_song
    
    if not song_queue:
        current_song = None
        if voice_client and voice_client.is_connected():
            embed = discord.Embed(
                title="üéµ Reproducci√≥n terminada",
                description="¬°He terminado de reproducir todas las canciones!\n¬øQuieres a√±adir m√°s m√∫sica?",
                color=0x32cd32
            )
            file = discord.File("nanali.jpg", filename="nanali.jpg")
            embed.set_thumbnail(url="attachment://nanali.jpg")
            embed.set_footer(text="Usa !p <url> para a√±adir m√°s m√∫sica ‚Ä¢ Nanali Music Bot", icon_url="attachment://nanali.jpg")
            await ctx.send(file=file, embed=embed)
        return
    
    # Obtener la siguiente canci√≥n
    song_info = song_queue.pop(0)
    current_song = song_info
    
    if voice_client is None or not voice_client.is_connected():
        voice_client = await connect_to_voice(ctx)
        if voice_client is None:
            return
    
    # Usar configuraci√≥n optimizada de FFmpeg
    FFMPEG_OPTIONS = get_ffmpeg_options('medium')
    
    def after_playing(error):
        if error:
            print(f"Error durante la reproducci√≥n: {error}")
        asyncio.run_coroutine_threadsafe(play_next(ctx), bot.loop)
    
    try:
        # Verificar que la URL de audio es v√°lida
        if not validate_audio_url(song_info['url']):
            raise Exception(ERROR_MESSAGES['no_audio_url'])
            
        log_debug(f"Intentando reproducir: {song_info['title']}", "playback")
        log_debug(f"URL de audio: {song_info['url'][:100]}...", "playback")
        
        source = discord.FFmpegPCMAudio(song_info['url'], **FFMPEG_OPTIONS)
        voice_client.play(source, after=after_playing)
        
        # Crear embed para mostrar informaci√≥n de la canci√≥n
        embed = discord.Embed(
            title="üéµ Reproduciendo ahora",
            description=f"**{song_info['title']}**",
            color=0x9932cc
        )
        embed.add_field(name="üë§ Canal", value=song_info['uploader'], inline=True)
        embed.add_field(name="‚è±Ô∏è Duraci√≥n", value=format_duration(song_info['duration']), inline=True)
        embed.add_field(name="üìã En cola", value=str(len(song_queue)), inline=True)
        
        # A√±adir imagen de Nanali
        file = discord.File("nanali.jpg", filename="nanali.jpg")
        embed.set_thumbnail(url="attachment://nanali.jpg")
        embed.set_footer(text=f"Solicitado por {song_info['requester']} ‚Ä¢ Nanali Music Bot", icon_url="attachment://nanali.jpg")
        
        await ctx.send(file=file, embed=embed)
        log_debug(f"Reproducci√≥n iniciada exitosamente: {song_info['title']}", "playback")
        
    except Exception as e:
        log_debug(f"Error cr√≠tico al reproducir: {e}", "playback")
        embed = discord.Embed(
            title="‚ùå Error de reproducci√≥n",
            description=f"No pude reproducir **{song_info['title']}**.\n\n**Error:** {str(e)[:100]}\n\nSaltando a la siguiente canci√≥n...",
            color=0xff4500
        )
        file = discord.File("nanali.jpg", filename="nanali.jpg")
        embed.set_thumbnail(url="attachment://nanali.jpg")
        embed.set_footer(text="Continuando con la siguiente ‚Ä¢ Nanali Music Bot", icon_url="attachment://nanali.jpg")
        await ctx.send(file=file, embed=embed)
        await play_next(ctx)

@bot.command(name="play", aliases=['p'])
async def play_command(ctx, *, url: str):
    global song_queue, voice_client, is_processing
    
    # Verificar si el usuario est√° en un canal de voz
    if not ctx.author.voice:
        await ctx.send("‚ùå Debes estar en un canal de voz para usar este comando.")
        return
    
    # Mensaje de procesamiento
    processing_msg = await ctx.send("üîç Procesando tu solicitud...")
    
    try:
        # Obtener informaci√≥n del audio de forma as√≠ncrona
        audio_url, title, duration, uploader = await get_audio_source(url)
        
        if not audio_url:
            log_debug(f"Fallo en extracci√≥n para URL: {url}", "play_command")
            embed = discord.Embed(
                title="‚ùå Error de procesamiento",
                description="No pude procesar tu solicitud. Por favor verifica:\n‚Ä¢ La URL sea v√°lida\n‚Ä¢ El video est√© disponible\n‚Ä¢ Tengas conexi√≥n a internet\n‚Ä¢ No sea una playlist",
                color=0xff0000
            )
            file = discord.File("nanali.jpg", filename="nanali.jpg")
            embed.set_thumbnail(url="attachment://nanali.jpg")
            embed.set_footer(text="Intenta con otra URL ‚Ä¢ Nanali Music Bot", icon_url="attachment://nanali.jpg")
            await processing_msg.edit(content="", embed=embed, attachments=[file])
            return
        
        # Crear objeto de canci√≥n
        song_info = {
            'url': audio_url,
            'title': title,
            'duration': duration,
            'uploader': uploader,
            'requester': ctx.author.display_name,
            'original_url': url
        }
        
        # A√±adir a la cola
        song_queue.append(song_info)
        
        # Crear embed de confirmaci√≥n
        embed = discord.Embed(
            title="‚úÖ A√±adido a la cola",
            description=f"**{title}**",
            color=0x00ff7f
        )
        embed.add_field(name="üë§ Canal", value=uploader, inline=True)
        embed.add_field(name="‚è±Ô∏è Duraci√≥n", value=format_duration(duration), inline=True)
        embed.add_field(name="üìç Posici√≥n en cola", value=str(len(song_queue)), inline=True)
        
        # A√±adir imagen de Nanali
        file = discord.File("nanali.jpg", filename="nanali.jpg")
        embed.set_thumbnail(url="attachment://nanali.jpg")
        embed.set_footer(text=f"Solicitado por {ctx.author.display_name} ‚Ä¢ Nanali Music Bot", icon_url="attachment://nanali.jpg")
        
        await processing_msg.edit(content="", embed=embed, attachments=[file])
        
        # Solo iniciar reproducci√≥n si no hay nada reproduci√©ndose
        if voice_client is None or not voice_client.is_playing():
            await play_next(ctx)
            
    except Exception as e:
        log_debug(f"Error en play_command: {e}", "play_command")
        embed = discord.Embed(
            title="‚ùå Error inesperado",
            description=f"Ocurri√≥ un error inesperado:\n```{str(e)[:200]}```\n\nPor favor intenta de nuevo.",
            color=0xff0000
        )
        file = discord.File("nanali.jpg", filename="nanali.jpg")
        embed.set_thumbnail(url="attachment://nanali.jpg")
        embed.set_footer(text="Nanali Music Bot ‚Ä¢ Error Handler", icon_url="attachment://nanali.jpg")
        await processing_msg.edit(content="", embed=embed, attachments=[file])



# Comando para saltar la canci√≥n actual
@bot.command()
async def skip(ctx):
    global voice_client
    if voice_client and voice_client.is_playing():
        voice_client.stop()
        await ctx.send("¬°Canci√≥n saltada!")
        await play_next(ctx)
    else:
        await ctx.send("No hay ninguna canci√≥n reproduci√©ndose para saltar.")

# Comando para ver la cola de reproducci√≥n
@bot.command(aliases=['q'])
async def queue(ctx):
    global song_queue, current_song
    
    if not current_song and not song_queue:
        await ctx.send("‚ùå La cola est√° vac√≠a.")
        return
    
    embed = discord.Embed(
        title="üìã Cola de reproducci√≥n",
        color=0xff6b6b
    )
    
    # Mostrar canci√≥n actual
    if current_song:
        embed.add_field(
            name="üéµ Reproduciendo ahora",
            value=f"**{current_song['title']}**\nüë§ Solicitado por {current_song['requester']}",
            inline=False
        )
    
    # Mostrar pr√≥ximas canciones (m√°ximo 10)
    if song_queue:
        next_songs = []
        for i, song in enumerate(song_queue[:10]):
            duration_str = ""
            if song['duration']:
                minutes, seconds = divmod(song['duration'], 60)
                duration_str = f" `[{minutes:02d}:{seconds:02d}]`"
            next_songs.append(f"`{i+1}.` **{song['title']}**{duration_str}\n    üë§ {song['requester']}")
        
        embed.add_field(
            name=f"‚è≠Ô∏è Pr√≥ximas canciones ({len(song_queue)} en total)",
            value="\n\n".join(next_songs) if next_songs else "Ninguna",
            inline=False
        )
        
        if len(song_queue) > 10:
            embed.set_footer(text=f"Y {len(song_queue) - 10} canciones m√°s... ‚Ä¢ Nanali Music Bot", icon_url="attachment://nanali.jpg")
        else:
            embed.set_footer(text="Nanali Music Bot", icon_url="attachment://nanali.jpg")
    
    # A√±adir imagen de Nanali
    file = discord.File("nanali.jpg", filename="nanali.jpg")
    embed.set_thumbnail(url="attachment://nanali.jpg")
    
    await ctx.send(file=file, embed=embed)

# Comando para ver la canci√≥n que se est√° reproduciendo actualmente
@bot.command(aliases=['np'])
async def nowplaying(ctx):
    global voice_client, current_song
    
    if not voice_client or not voice_client.is_playing() or not current_song:
        await ctx.send("‚ùå No hay ninguna canci√≥n reproduci√©ndose actualmente.")
        return
    
    embed = discord.Embed(
        title="üéµ Reproduciendo ahora",
        description=f"**{current_song['title']}**",
        color=0x9932cc
    )
    embed.add_field(name="üë§ Canal", value=current_song['uploader'], inline=True)
    if current_song['duration']:
        minutes, seconds = divmod(current_song['duration'], 60)
        embed.add_field(name="‚è±Ô∏è Duraci√≥n", value=f"{minutes:02d}:{seconds:02d}", inline=True)
    embed.add_field(name="üìã En cola", value=str(len(song_queue)), inline=True)
    
    # A√±adir imagen de Nanali
    file = discord.File("nanali.jpg", filename="nanali.jpg")
    embed.set_thumbnail(url="attachment://nanali.jpg")
    embed.set_footer(text=f"Solicitado por {current_song['requester']} ‚Ä¢ Nanali Music Bot", icon_url="attachment://nanali.jpg")
    
    await ctx.send(file=file, embed=embed)

@bot.command()
async def stop(ctx):
    global voice_client
    global song_queue
    if voice_client and voice_client.is_playing():
        voice_client.stop()
        song_queue = []  # Limpiar la cola al detener
        await ctx.send("¬°Reproducci√≥n detenida y la cola ha sido limpiada!")
    else:
        await ctx.send("No hay nada reproduci√©ndose.")

@bot.command()
async def leave(ctx):
    global voice_client
    global song_queue
    if voice_client and voice_client.is_connected():
        await voice_client.disconnect()
        voice_client = None
        song_queue = []  # Limpiar la cola al desconectar
        await ctx.send("¬°Me desconect√© del canal de voz y la cola ha sido limpiada!")
    else:
        await ctx.send("No estoy conectado a ning√∫n canal de voz.")

# Evento cuando el bot se conecta correctamente
@bot.event
async def on_ready():
    print(f'üå∏ Nanali Music Bot conectada como {bot.user}')
    print('üéµ Lista para reproducir m√∫sica!')
    await bot.change_presence(
        activity=discord.Activity(
            type=discord.ActivityType.listening, 
            name="üéµ m√∫sica con !help_music"
        ), 
        status=discord.Status.online
    )

# Evento para procesar mensajes y verificar menciones
@bot.event
async def on_message(message):
    if message.author == bot.user:
        return

    if bot.user.mention in message.content:
        parts = message.content.split()
        if len(parts) > 1:
            command = parts[1].lower()
            if command == 'pollo' and len(parts) > 2:
                url = parts[2]
                await play_command(message, url=url)
                return
            elif command == 'play' and len(parts) > 2:
                url = parts[2]
                await play_command(message, url=url)

    await bot.process_commands(message)

# Nuevos comandos adicionales
@bot.command()
async def shuffle(ctx):
    """Mezcla aleatoriamente la cola de reproducci√≥n"""
    global song_queue
    if len(song_queue) < 2:
        await ctx.send("‚ùå Necesitas al menos 2 canciones en la cola para mezclar.")
        return
    
    import random
    random.shuffle(song_queue)
    embed = discord.Embed(
        title="üîÄ Cola mezclada",
        description=f"¬°Perfecto! He mezclado **{len(song_queue)} canciones** aleatoriamente.",
        color=0xffd700
    )
    file = discord.File("nanali.jpg", filename="nanali.jpg")
    embed.set_thumbnail(url="attachment://nanali.jpg")
    embed.set_footer(text="¬°Ahora la m√∫sica ser√° m√°s sorprendente! ‚Ä¢ Nanali Music Bot", icon_url="attachment://nanali.jpg")
    await ctx.send(file=file, embed=embed)

@bot.command()
async def clear(ctx):
    """Limpia toda la cola de reproducci√≥n"""
    global song_queue
    if not song_queue:
        await ctx.send("‚ùå La cola ya est√° vac√≠a.")
        return
    
    cleared_count = len(song_queue)
    song_queue.clear()
    embed = discord.Embed(
        title="üóëÔ∏è Cola limpiada",
        description=f"He eliminado **{cleared_count} canciones** de la cola.\n¬°Lista para nuevas aventuras musicales!",
        color=0xff4500
    )
    file = discord.File("nanali.jpg", filename="nanali.jpg")
    embed.set_thumbnail(url="attachment://nanali.jpg")
    embed.set_footer(text="Cola limpia y lista ‚Ä¢ Nanali Music Bot", icon_url="attachment://nanali.jpg")
    await ctx.send(file=file, embed=embed)

@bot.command()
async def remove(ctx, position: int):
    """Elimina una canci√≥n espec√≠fica de la cola"""
    global song_queue
    if not song_queue:
        await ctx.send("‚ùå La cola est√° vac√≠a.")
        return
    
    if position < 1 or position > len(song_queue):
        await ctx.send(f"‚ùå Posici√≥n inv√°lida. Usa un n√∫mero entre 1 y {len(song_queue)}.")
        return
    
    removed_song = song_queue.pop(position - 1)
    embed = discord.Embed(
        title="üóëÔ∏è Canci√≥n eliminada",
        description=f"He eliminado **{removed_song['title']}** de la posici√≥n {position}.",
        color=0xff6347
    )
    file = discord.File("nanali.jpg", filename="nanali.jpg")
    embed.set_thumbnail(url="attachment://nanali.jpg")
    embed.set_footer(text="Canci√≥n eliminada exitosamente ‚Ä¢ Nanali Music Bot", icon_url="attachment://nanali.jpg")
    await ctx.send(file=file, embed=embed)

@bot.command(aliases=['vol', 'v'])
async def volume(ctx, vol: int = None):
    """Ajusta el volumen (0-150) - ¬°Ahora con boost!"""
    global voice_client
    if not voice_client or not voice_client.is_playing():
        embed = discord.Embed(
            title="‚ùå Sin reproducci√≥n",
            description="No hay m√∫sica reproduci√©ndose actualmente.",
            color=0xff0000
        )
        file = discord.File("nanali.jpg", filename="nanali.jpg")
        embed.set_thumbnail(url="attachment://nanali.jpg")
        embed.set_footer(text="Usa !p <url> para reproducir m√∫sica ‚Ä¢ Nanali Music Bot", icon_url="attachment://nanali.jpg")
        await ctx.send(file=file, embed=embed)
        return
    
    if vol is None:
        current_vol = int(getattr(voice_client.source, 'volume', 1.0) * 100)
        embed = discord.Embed(
            title="üîä Control de Volumen",
            description=f"**Volumen actual:** {current_vol}%\n\n**Uso:** `!volume <0-150>`\n‚Ä¢ 0-100: Volumen normal\n‚Ä¢ 101-150: Modo boost üöÄ",
            color=0x00bfff
        )
        file = discord.File("nanali.jpg", filename="nanali.jpg")
        embed.set_thumbnail(url="attachment://nanali.jpg")
        embed.set_footer(text="¬°Controla tu experiencia musical! ‚Ä¢ Nanali Music Bot", icon_url="attachment://nanali.jpg")
        await ctx.send(file=file, embed=embed)
        return
    
    if vol < 0 or vol > 150:
        embed = discord.Embed(
            title="‚ùå Volumen inv√°lido",
            description="El volumen debe estar entre **0-150**\n‚Ä¢ 0-100: Normal\n‚Ä¢ 101-150: Boost mode üöÄ",
            color=0xff4500
        )
        file = discord.File("nanali.jpg", filename="nanali.jpg")
        embed.set_thumbnail(url="attachment://nanali.jpg")
        embed.set_footer(text="Rango v√°lido: 0-150 ‚Ä¢ Nanali Music Bot", icon_url="attachment://nanali.jpg")
        await ctx.send(file=file, embed=embed)
        return
    
    # Aplicar volumen con transformaci√≥n
    if hasattr(voice_client.source, 'volume'):
        voice_client.source.volume = vol / 100
    
    # Crear embed de confirmaci√≥n
    if vol <= 100:
        emoji = "üîä" if vol > 50 else "üîâ" if vol > 0 else "üîá"
        mode = "Normal"
        color = 0x00ff00
    else:
        emoji = "üöÄ"
        mode = "BOOST MODE"
        color = 0xff6600
    
    embed = discord.Embed(
        title=f"{emoji} Volumen ajustado",
        description=f"**Volumen:** {vol}% ({mode})\n\n{get_volume_bar(vol)}",
        color=color
    )
    file = discord.File("nanali.jpg", filename="nanali.jpg")
    embed.set_thumbnail(url="attachment://nanali.jpg")
    embed.set_footer(text="¬°Disfruta tu m√∫sica! ‚Ä¢ Nanali Music Bot", icon_url="attachment://nanali.jpg")
    await ctx.send(file=file, embed=embed)

def get_volume_bar(volume):
    """Genera una barra visual de volumen"""
    filled = int(volume / 10)
    empty = 10 - filled
    if volume <= 100:
        bar = "üü©" * filled + "‚¨ú" * empty
    else:
        normal_filled = 10
        boost_filled = int((volume - 100) / 5)
        bar = "üü©" * normal_filled + "üüß" * min(boost_filled, 10)
    return f"`{bar}` {volume}%"

@bot.command()
async def help_music(ctx):
    """Muestra todos los comandos de m√∫sica disponibles"""
    embed = discord.Embed(
        title="üéµ Nanali Music Bot v3.0 - Comandos Completos",
        description="¬°Konnichiwa! Soy Nanali, tu bot de m√∫sica otaku üå∏\n\n**¬°Ahora con funciones premium y tem√°tica anime!**",
        color=0xff69b4
    )
    
    # Comandos b√°sicos
    basic_commands = [
        ("üéµ !play <url> (o !p)", "Reproduce m√∫sica de alta calidad"),
        ("üîç !search <t√©rmino>", "Busca m√∫sica con selecci√≥n interactiva"),
        ("‚è≠Ô∏è !skip", "Salta la canci√≥n actual"),
        ("‚èπÔ∏è !stop", "Detiene la reproducci√≥n y limpia la cola"),
        ("üö™ !leave", "Me desconecto del canal de voz")
    ]
    
    # Comandos de gesti√≥n
    queue_commands = [
        ("üìã !queue (o !q)", "Muestra la cola de reproducci√≥n"),
        ("üéµ !nowplaying (o !np)", "Muestra la canci√≥n actual"),
        ("üîÄ !shuffle", "Mezcla aleatoriamente la cola"),
        ("üóëÔ∏è !clear", "Limpia toda la cola"),
        ("‚ùå !remove <posici√≥n>", "Elimina una canci√≥n espec√≠fica"),
        ("üîÑ !loop <song/queue/off>", "Modo repetici√≥n avanzado")
    ]
    
    # Comandos otaku/anime
    anime_commands = [
        ("üå∏ !weeb (o !anime)", "Men√∫ completo de comandos otaku"),
        ("üéµ !anime_op", "Openings de anime aleatorios"),
        ("üé∂ !anime_ed", "Endings emotivos de anime"),
        ("üéº !vocaloid", "M√∫sica de Hatsune Miku y m√°s"),
        ("üå∏ !kawaii", "J-Pop y m√∫sica kawaii"),
        ("‚ö° !epic_anime", "M√∫sica √©pica de peleas"),
        ("üé≠ !character <nombre>", "M√∫sica de personajes espec√≠ficos")
    ]
    
    # Comandos avanzados
    advanced_commands = [
        ("üîä !volume <0-150> (o !v)", "Control de volumen con boost"),
        ("üéõÔ∏è !bass_boost <0-4>", "Ecualizador y efectos de audio"),
        ("‚ÑπÔ∏è !nanali", "Informaci√≥n sobre m√≠"),
        ("üìä !stats", "Estad√≠sticas del servidor"),
        ("‚ùì !help_music", "Este men√∫ de ayuda")
    ]
    
    embed.add_field(name="üéÆ Comandos B√°sicos", value="\n".join([f"**{cmd}**\n{desc}" for cmd, desc in basic_commands]), inline=False)
    embed.add_field(name="üìã Gesti√≥n de Cola", value="\n".join([f"**{cmd}**\n{desc}" for cmd, desc in queue_commands]), inline=False)
    embed.add_field(name="üå∏ Comandos Otaku", value="\n".join([f"**{cmd}**\n{desc}" for cmd, desc in anime_commands]), inline=False)
    embed.add_field(name="‚öôÔ∏è Comandos Avanzados", value="\n".join([f"**{cmd}**\n{desc}" for cmd, desc in advanced_commands]), inline=False)
    
    embed.add_field(
        name="‚ú® Caracter√≠sticas Premium",
        value="‚Ä¢ Audio en calidad 320kbps\n‚Ä¢ Modo boost hasta 150%\n‚Ä¢ Ecualizador integrado\n‚Ä¢ Playlists tem√°ticas\n‚Ä¢ B√∫squeda interactiva\n‚Ä¢ Repetici√≥n avanzada",
        inline=False
    )
    
    # A√±adir imagen de Nanali
    file = discord.File("nanali.jpg", filename="nanali.jpg")
    embed.set_thumbnail(url="attachment://nanali.jpg")
    embed.set_footer(text="¬°Hecho con amor por una otaku! ‚Ä¢ Nanali Music Bot v3.0", icon_url="attachment://nanali.jpg")
    
    await ctx.send(file=file, embed=embed)

@bot.command()
async def nanali(ctx):
    """Informaci√≥n completa sobre Nanali"""
    embed = discord.Embed(
        title="üå∏ ¬°Konnichiwa! Soy Nanali",
        description="Tu bot de m√∫sica otaku con personalidad kawaii y funciones premium üíñ\n\n*¬°Ahora con calidad de audio superior y tem√°tica anime!*",
        color=0xff1493
    )
    
    embed.add_field(
        name="üéµ ¬øQu√© puedo hacer?",
        value="‚Ä¢ Reproducir m√∫sica en **calidad 320kbps**\n‚Ä¢ Playlists tem√°ticas de anime\n‚Ä¢ B√∫squeda interactiva avanzada\n‚Ä¢ Control de volumen con boost (hasta 150%)\n‚Ä¢ Ecualizador y efectos de audio\n‚Ä¢ Auto-desconexi√≥n inteligente",
        inline=False
    )
    
    embed.add_field(
        name="üå∏ Caracter√≠sticas Otaku",
        value="‚Ä¢ Openings y endings de anime\n‚Ä¢ M√∫sica de Vocaloid (Miku, Rin, Len...)\n‚Ä¢ J-Pop y m√∫sica kawaii\n‚Ä¢ OSTs √©picos de anime\n‚Ä¢ B√∫squeda por personajes\n‚Ä¢ Playlists curadas por otakus",
        inline=False
    )
    
    embed.add_field(
        name="‚ö° Funciones Premium",
        value="‚Ä¢ Sistema de cola sin distorsi√≥n\n‚Ä¢ Modo repetici√≥n avanzado\n‚Ä¢ Bass boost y ecualizador\n‚Ä¢ Interfaz visual mejorada\n‚Ä¢ Procesamiento as√≠ncrono\n‚Ä¢ Estad√≠sticas del servidor",
        inline=False
    )
    
    embed.add_field(
        name="üéØ Comandos r√°pidos",
        value="‚Ä¢ `!p <url>` - Reproducir m√∫sica\n‚Ä¢ `!search <t√©rmino>` - Buscar m√∫sica\n‚Ä¢ `!weeb` - Comandos otaku\n‚Ä¢ `!anime_op` - Opening aleatorio\n‚Ä¢ `!help_music` - Todos los comandos",
        inline=False
    )
    
    embed.add_field(
        name="üìä Versi√≥n Actual",
        value="**Nanali Music Bot v3.0**\n‚Ä¢ Calidad de audio mejorada\n‚Ä¢ Nuevos comandos otaku\n‚Ä¢ Interfaz completamente renovada\n‚Ä¢ Funciones premium integradas",
        inline=False
    )
    
    # A√±adir imagen de Nanali
    file = discord.File("nanali.jpg", filename="nanali.jpg")
    embed.set_image(url="attachment://nanali.jpg")
    embed.set_footer(text="¬°Creada con amor por una otaku para otakus! ‚Ä¢ Nanali Music Bot v3.0")
    
    await ctx.send(file=file, embed=embed)

@bot.command()
async def stats(ctx):
    """Muestra estad√≠sticas del bot y servidor"""
    global song_queue, current_song
    
    # Obtener informaci√≥n del servidor
    guild = ctx.guild
    voice_channels = len([c for c in guild.channels if isinstance(c, discord.VoiceChannel)])
    text_channels = len([c for c in guild.channels if isinstance(c, discord.TextChannel)])
    
    # Informaci√≥n del bot
    bot_latency = round(bot.latency * 1000)
    
    embed = discord.Embed(
        title="üìä Estad√≠sticas de Nanali Music Bot",
        description="¬°Aqu√≠ tienes informaci√≥n detallada sobre mi rendimiento! üå∏",
        color=0x00bfff
    )
    
    # Estad√≠sticas del servidor
    embed.add_field(
        name="üè† Informaci√≥n del Servidor",
        value=f"**Nombre:** {guild.name}\n**Miembros:** {guild.member_count}\n**Canales de voz:** {voice_channels}\n**Canales de texto:** {text_channels}",
        inline=True
    )
    
    # Estad√≠sticas del bot
    embed.add_field(
        name="ü§ñ Estado del Bot",
        value=f"**Latencia:** {bot_latency}ms\n**Servidores:** {len(bot.guilds)}\n**Versi√≥n:** v3.0\n**Estado:** {'üü¢ Conectada' if voice_client and voice_client.is_connected() else 'üî¥ Desconectada'}",
        inline=True
    )
    
    # Estad√≠sticas de m√∫sica
    queue_length = len(song_queue)
    current_status = "üéµ Reproduciendo" if voice_client and voice_client.is_playing() else "‚è∏Ô∏è Pausada" if voice_client and voice_client.is_paused() else "‚èπÔ∏è Detenida"
    
    embed.add_field(
        name="üéµ Estado Musical",
        value=f"**Estado:** {current_status}\n**En cola:** {queue_length} canciones\n**Canci√≥n actual:** {'‚úÖ S√≠' if current_song else '‚ùå No'}\n**Calidad:** 320kbps",
        inline=True
    )
    
    # Funciones disponibles
    embed.add_field(
        name="‚ö° Funciones Activas",
        value=f"**Modo repetici√≥n:** {getattr(bot, 'loop_mode', 'off').upper()}\n**Bass boost:** Nivel {getattr(bot, 'bass_level', 0)}\n**Auto-desconexi√≥n:** ‚úÖ Activa\n**B√∫squeda avanzada:** ‚úÖ Disponible",
        inline=True
    )
    
    # Comandos m√°s usados (simulado)
    embed.add_field(
        name="üî• Comandos Populares",
        value="1Ô∏è‚É£ `!play` - Reproducir m√∫sica\n2Ô∏è‚É£ `!anime_op` - Openings de anime\n3Ô∏è‚É£ `!search` - B√∫squeda avanzada\n4Ô∏è‚É£ `!vocaloid` - M√∫sica Vocaloid\n5Ô∏è‚É£ `!volume` - Control de volumen",
        inline=True
    )
    
    # Informaci√≥n t√©cnica
    embed.add_field(
        name="üõ†Ô∏è Informaci√≥n T√©cnica",
        value="**Codec de audio:** Opus\n**Bitrate:** 320kbps\n**Canales:** Est√©reo (2)\n**Frecuencia:** 48kHz\n**Buffer:** 512kb",
        inline=True
    )
    
    # A√±adir imagen de Nanali
    file = discord.File("nanali.jpg", filename="nanali.jpg")
    embed.set_thumbnail(url="attachment://nanali.jpg")
    embed.set_footer(text="¬°Estad√≠sticas actualizadas en tiempo real! ‚Ä¢ Nanali Music Bot v3.0", icon_url="attachment://nanali.jpg")
    
    await ctx.send(file=file, embed=embed)

# ===== COMANDOS TEM√ÅTICOS ANIME =====

@bot.command()
async def anime_op(ctx):
    """Reproduce openings de anime populares"""
    anime_ops = [
        "Attack on Titan opening 1 Guren no Yumiya",
        "Demon Slayer opening Gurenge",
        "Naruto opening 16 Silhouette",
        "One Piece opening 1 We Are",
        "Dragon Ball Z opening Cha-La Head-Cha-La",
        "Death Note opening 1 The World",
        "Tokyo Ghoul opening Unravel",
        "Fullmetal Alchemist Brotherhood opening 1",
        "My Hero Academia opening 1 The Day",
        "Jujutsu Kaisen opening Kaikai Kitan",
        "Mob Psycho 100 opening 99",
        "One Punch Man opening The Hero"
    ]
    
    import random
    selected_op = random.choice(anime_ops)
    
    embed = discord.Embed(
        title="üéµ Opening de Anime Seleccionado",
        description=f"¬°Reproduciendo: **{selected_op}**!",
        color=0xff6b6b
    )
    file = discord.File("nanali.jpg", filename="nanali.jpg")
    embed.set_thumbnail(url="attachment://nanali.jpg")
    embed.set_footer(text="¬°Disfruta este √©pico opening! ‚Ä¢ Nanali Music Bot", icon_url="attachment://nanali.jpg")
    await ctx.send(file=file, embed=embed)
    
    # Buscar y reproducir
    await search_and_play(ctx, selected_op)

@bot.command()
async def anime_ed(ctx):
    """Reproduce endings de anime emotivos"""
    anime_eds = [
        "Attack on Titan ending 1 Utsukushiki Zankoku na Sekai",
        "Naruto Shippuden ending 6 Sign",
        "Fullmetal Alchemist Brotherhood ending 1",
        "Death Note ending 1 Alumina",
        "Tokyo Ghoul ending On My Own",
        "Demon Slayer ending Kamado Tanjiro no Uta",
        "Your Name ending Nandemonaiya",
        "Violet Evergarden ending Michishirube",
        "Anohana ending Secret Base",
        "Clannad ending Dango Daikazoku"
    ]
    
    import random
    selected_ed = random.choice(anime_eds)
    
    embed = discord.Embed(
        title="üé∂ Ending de Anime Seleccionado",
        description=f"¬°Reproduciendo: **{selected_ed}**!",
        color=0x9370db
    )
    file = discord.File("nanali.jpg", filename="nanali.jpg")
    embed.set_thumbnail(url="attachment://nanali.jpg")
    embed.set_footer(text="¬°Prep√°rate para los feels! ‚Ä¢ Nanali Music Bot", icon_url="attachment://nanali.jpg")
    await ctx.send(file=file, embed=embed)
    
    await search_and_play(ctx, selected_ed)

@bot.command()
async def vocaloid(ctx):
    """Reproduce m√∫sica de Vocaloid"""
    vocaloid_songs = [
        "Hatsune Miku Senbonzakura",
        "Hatsune Miku World is Mine",
        "Kagamine Rin Len Servant of Evil",
        "Hatsune Miku Tell Your World",
        "GUMI Matryoshka",
        "Hatsune Miku Rolling Girl",
        "Kagamine Rin Kokoro",
        "Hatsune Miku Love is War",
        "IA Kagerou Days",
        "Hatsune Miku Disappearance of Hatsune Miku"
    ]
    
    import random
    selected_song = random.choice(vocaloid_songs)
    
    embed = discord.Embed(
        title="üéº Vocaloid Seleccionado",
        description=f"¬°Reproduciendo: **{selected_song}**!\n\nüé§ ¬°La magia de las voces sint√©ticas!",
        color=0x00ffff
    )
    file = discord.File("nanali.jpg", filename="nanali.jpg")
    embed.set_thumbnail(url="attachment://nanali.jpg")
    embed.set_footer(text="¬°Miku-Miku beam! ‚Ä¢ Nanali Music Bot", icon_url="attachment://nanali.jpg")
    await ctx.send(file=file, embed=embed)
    
    await search_and_play(ctx, selected_song)

@bot.command()
async def kawaii(ctx):
    """Reproduce m√∫sica kawaii y J-Pop"""
    kawaii_songs = [
        "Kyary Pamyu Pamyu PonPonPon",
        "Perfume Polyrhythm",
        "AKB48 Heavy Rotation",
        "Babymetal Gimme Chocolate",
        "Kyary Pamyu Pamyu Fashion Monster",
        "Perfume Chocolate Disco",
        "Morning Musume Love Machine",
        "Momoiro Clover Z Saraba",
        "Scandal Harukaze",
        "Silent Siren Cherry Hunter"
    ]
    
    import random
    selected_song = random.choice(kawaii_songs)
    
    embed = discord.Embed(
        title="üå∏ M√∫sica Kawaii Seleccionada",
        description=f"¬°Reproduciendo: **{selected_song}**!\n\nüíñ ¬°Prep√°rate para la ternura m√°xima!",
        color=0xffb6c1
    )
    file = discord.File("nanali.jpg", filename="nanali.jpg")
    embed.set_thumbnail(url="attachment://nanali.jpg")
    embed.set_footer(text="Kawaii desu ne! (‚óï‚Äø‚óï) ‚Ä¢ Nanali Music Bot", icon_url="attachment://nanali.jpg")
    await ctx.send(file=file, embed=embed)
    
    await search_and_play(ctx, selected_song)

@bot.command()
async def epic_anime(ctx):
    """Reproduce m√∫sica √©pica de anime"""
    epic_songs = [
        "Attack on Titan Vogel im Kafig",
        "Demon Slayer Tanjiro no Uta",
        "Naruto Strong and Strike",
        "Dragon Ball Z Ultimate Battle",
        "One Piece Overtaken",
        "Bleach Number One",
        "Fairy Tail Main Theme",
        "Fullmetal Alchemist Brotherhood Lapis Philosophorum",
        "Jujutsu Kaisen Domain Expansion",
        "My Hero Academia You Say Run"
    ]
    
    import random
    selected_song = random.choice(epic_songs)
    
    embed = discord.Embed(
        title="‚ö° M√∫sica √âpica de Anime",
        description=f"¬°Reproduciendo: **{selected_song}**!\n\nüî• ¬°Prep√°rate para la epicidad!",
        color=0xff4500
    )
    file = discord.File("nanali.jpg", filename="nanali.jpg")
    embed.set_thumbnail(url="attachment://nanali.jpg")
    embed.set_footer(text="¬°El poder del anime te acompa√±a! ‚Ä¢ Nanali Music Bot", icon_url="attachment://nanali.jpg")
    await ctx.send(file=file, embed=embed)
    
    await search_and_play(ctx, selected_song)

@bot.command()
async def character(ctx, *, character_name: str):
    """Busca m√∫sica relacionada con un personaje de anime"""
    search_query = f"{character_name} anime song theme music"
    
    embed = discord.Embed(
        title="üé≠ B√∫squeda de Personaje",
        description=f"Buscando m√∫sica relacionada con: **{character_name}**",
        color=0x8a2be2
    )
    file = discord.File("nanali.jpg", filename="nanali.jpg")
    embed.set_thumbnail(url="attachment://nanali.jpg")
    embed.set_footer(text="¬°Encontrando la m√∫sica perfecta! ‚Ä¢ Nanali Music Bot", icon_url="attachment://nanali.jpg")
    await ctx.send(file=file, embed=embed)
    
    await search_and_play(ctx, search_query)

async def search_and_play(ctx, query):
    """Funci√≥n auxiliar para buscar y reproducir autom√°ticamente"""
    try:
        search_query = f"ytsearch1:{query}"
        data = await asyncio.get_running_loop().run_in_executor(
            None, lambda: ydl.extract_info(search_query, download=False)
        )
        
        if data and 'entries' in data and data['entries'] and data['entries'][0]:
            entry = data['entries'][0]
            url = f"https://www.youtube.com/watch?v={entry['id']}"
            await play_command(ctx, url=url)
        else:
            await ctx.send(f"‚ùå No pude encontrar: {query}")
    except Exception as e:
        await ctx.send(f"‚ùå Error al buscar: {str(e)}")
        print(f"Error en search_and_play: {e}")

# ===== NUEVOS COMANDOS OTAKU/ANIME =====

@bot.command(aliases=['anime', 'otaku'])
async def weeb(ctx):
    """Comandos especiales para otakus üå∏"""
    embed = discord.Embed(
        title="üå∏ Modo Otaku Activado",
        description="¬°Konnichiwa! Aqu√≠ tienes comandos especiales para verdaderos otakus üíñ",
        color=0xff69b4
    )
    
    commands = [
        ("üéµ !anime_op", "Reproduce openings de anime aleatorios"),
        ("üé∂ !anime_ed", "Reproduce endings de anime"),
        ("üéº !vocaloid", "M√∫sica de Vocaloid (Miku, Rin, Len...)"),
        ("üéÆ !game_ost", "OSTs de videojuegos japoneses"),
        ("üå∏ !kawaii", "M√∫sica kawaii y J-Pop"),
        ("‚ö° !epic_anime", "M√∫sica √©pica de anime (peleas, momentos intensos)"),
        ("üò¢ !sad_anime", "M√∫sica emotiva de anime"),
        ("üé≠ !character <nombre>", "Busca m√∫sica relacionada con un personaje")
    ]
    
    embed.add_field(
        name="üéå Comandos Disponibles",
        value="\n".join([f"**{cmd}**\n{desc}" for cmd, desc in commands]),
        inline=False
    )
    
    embed.add_field(
        name="‚ú® Caracter√≠sticas Especiales",
        value="‚Ä¢ Playlists curadas por otakus\n‚Ä¢ Calidad de audio premium\n‚Ä¢ Informaci√≥n detallada del anime\n‚Ä¢ Modo aleatorio tem√°tico",
        inline=False
    )
    
    file = discord.File("nanali.jpg", filename="nanali.jpg")
    embed.set_image(url="attachment://nanali.jpg")
    embed.set_footer(text="¬°Hecho con amor por una otaku! ‚Ä¢ Nanali Music Bot", icon_url="attachment://nanali.jpg")
    
    await ctx.send(file=file, embed=embed)

@bot.command()
async def search(ctx, *, query: str):
    """Busca m√∫sica en YouTube con resultados m√∫ltiples"""
    if not ctx.author.voice:
        await ctx.send("‚ùå Debes estar en un canal de voz para usar este comando.")
        return
    
    processing_msg = await ctx.send("üîç Buscando m√∫sica...")
    
    try:
        # Buscar m√∫ltiples resultados
        search_query = f"ytsearch5:{query}"
        data = await asyncio.get_running_loop().run_in_executor(
            None, lambda: ydl.extract_info(search_query, download=False)
        )
        
        if not data or 'entries' not in data or not data['entries']:
            embed = discord.Embed(
                title="‚ùå Sin resultados",
                description=f"No encontr√© resultados para: **{query}**",
                color=0xff0000
            )
            file = discord.File("nanali.jpg", filename="nanali.jpg")
            embed.set_thumbnail(url="attachment://nanali.jpg")
            embed.set_footer(text="Intenta con otros t√©rminos ‚Ä¢ Nanali Music Bot", icon_url="attachment://nanali.jpg")
            await processing_msg.edit(content="", embed=embed, attachments=[file])
            return
        
        # Crear embed con resultados
        embed = discord.Embed(
            title="üîç Resultados de b√∫squeda",
            description=f"Encontr√© estas canciones para: **{query}**\n\nReacciona con el n√∫mero para seleccionar:",
            color=0x00bfff
        )
        
        results = []
        for i, entry in enumerate(data['entries'][:5]):
            if entry:
                duration = entry.get('duration', 0)
                duration_str = f"{duration//60:02d}:{duration%60:02d}" if duration else "N/A"
                uploader = entry.get('uploader', 'Desconocido')[:20]
                title = entry.get('title', 'Sin t√≠tulo')[:50]
                
                embed.add_field(
                    name=f"{i+1}Ô∏è‚É£ {title}",
                    value=f"üë§ {uploader} | ‚è±Ô∏è {duration_str}",
                    inline=False
                )
                results.append(entry)
        
        file = discord.File("nanali.jpg", filename="nanali.jpg")
        embed.set_thumbnail(url="attachment://nanali.jpg")
        embed.set_footer(text="Tienes 30 segundos para elegir ‚Ä¢ Nanali Music Bot", icon_url="attachment://nanali.jpg")
        
        msg = await processing_msg.edit(content="", embed=embed, attachments=[file])
        
        # A√±adir reacciones
        reactions = ['1Ô∏è‚É£', '2Ô∏è‚É£', '3Ô∏è‚É£', '4Ô∏è‚É£', '5Ô∏è‚É£']
        for i in range(len(results)):
            await msg.add_reaction(reactions[i])
        
        # Esperar reacci√≥n del usuario
        def check(reaction, user):
            return (
                user == ctx.author and 
                str(reaction.emoji) in reactions[:len(results)] and 
                reaction.message.id == msg.id
            )
        
        try:
            reaction, user = await bot.wait_for('reaction_add', timeout=30.0, check=check)
            selected_index = reactions.index(str(reaction.emoji))
            selected_entry = results[selected_index]
            
            # Reproducir la canci√≥n seleccionada
            url = f"https://www.youtube.com/watch?v={selected_entry['id']}"
            await play_command(ctx, url=url)
            
        except asyncio.TimeoutError:
            embed.set_footer(text="‚è∞ Tiempo agotado ‚Ä¢ Nanali Music Bot", icon_url="attachment://nanali.jpg")
            await msg.edit(embed=embed)
            
    except Exception as e:
        await processing_msg.edit(content=f"‚ùå Error en la b√∫squeda: {str(e)}")
        print(f"Error en search: {e}")

@bot.command(aliases=['loop', 'repeat'])
async def loop_song(ctx, mode: str = None):
    """Activa/desactiva el modo repetici√≥n (song/queue/off)"""
    global loop_mode, current_song
    
    if not hasattr(bot, 'loop_mode'):
        bot.loop_mode = 'off'
    
    if mode is None:
        embed = discord.Embed(
            title="üîÑ Modo Repetici√≥n",
            description=f"**Estado actual:** {bot.loop_mode.upper()}\n\n**Modos disponibles:**\n‚Ä¢ `song` - Repite la canci√≥n actual\n‚Ä¢ `queue` - Repite toda la cola\n‚Ä¢ `off` - Sin repetici√≥n",
            color=0x9932cc
        )
        file = discord.File("nanali.jpg", filename="nanali.jpg")
        embed.set_thumbnail(url="attachment://nanali.jpg")
        embed.set_footer(text="Uso: !loop <song/queue/off> ‚Ä¢ Nanali Music Bot", icon_url="attachment://nanali.jpg")
        await ctx.send(file=file, embed=embed)
        return
    
    if mode.lower() not in ['song', 'queue', 'off']:
        await ctx.send("‚ùå Modo inv√°lido. Usa: `song`, `queue` o `off`")
        return
    
    bot.loop_mode = mode.lower()
    
    mode_emojis = {'song': 'üîÇ', 'queue': 'üîÅ', 'off': '‚èπÔ∏è'}
    mode_names = {'song': 'Canci√≥n actual', 'queue': 'Cola completa', 'off': 'Desactivado'}
    
    embed = discord.Embed(
        title=f"{mode_emojis[bot.loop_mode]} Repetici√≥n configurada",
        description=f"**Modo:** {mode_names[bot.loop_mode]}\n\n{get_loop_description(bot.loop_mode)}",
        color=0x00ff00 if bot.loop_mode != 'off' else 0x808080
    )
    file = discord.File("nanali.jpg", filename="nanali.jpg")
    embed.set_thumbnail(url="attachment://nanali.jpg")
    embed.set_footer(text="¬°Configuraci√≥n guardada! ‚Ä¢ Nanali Music Bot", icon_url="attachment://nanali.jpg")
    await ctx.send(file=file, embed=embed)

def get_loop_description(mode):
    descriptions = {
        'song': 'üéµ La canci√≥n actual se repetir√° infinitamente',
        'queue': 'üîÑ Toda la cola se repetir√° cuando termine',
        'off': '‚èπÔ∏è Sin repetici√≥n, reproducci√≥n normal'
    }
    return descriptions.get(mode, '')

@bot.command(aliases=['eq', 'equalizer'])
async def bass_boost(ctx, level: int = None):
    """Aplica efectos de audio (bass boost, etc.)"""
    if level is None:
        embed = discord.Embed(
            title="üéõÔ∏è Ecualizador de Audio",
            description="**Niveles disponibles:**\n‚Ä¢ `0` - Audio normal\n‚Ä¢ `1` - Bass boost ligero\n‚Ä¢ `2` - Bass boost medio\n‚Ä¢ `3` - Bass boost intenso\n‚Ä¢ `4` - BASS EXTREMO üí•",
            color=0xff6600
        )
        file = discord.File("nanali.jpg", filename="nanali.jpg")
        embed.set_thumbnail(url="attachment://nanali.jpg")
        embed.set_footer(text="Uso: !bass_boost <0-4> ‚Ä¢ Nanali Music Bot", icon_url="attachment://nanali.jpg")
        await ctx.send(file=file, embed=embed)
        return
    
    if level < 0 or level > 4:
        await ctx.send("‚ùå Nivel inv√°lido. Usa un n√∫mero entre 0-4.")
        return
    
    # Guardar configuraci√≥n de bass boost
    bot.bass_level = level
    
    level_names = ['Normal', 'Ligero', 'Medio', 'Intenso', 'EXTREMO üí•']
    level_emojis = ['üéµ', 'üé∂', 'üé∏', 'üîä', 'üí•']
    
    embed = discord.Embed(
        title=f"{level_emojis[level]} Bass Boost Configurado",
        description=f"**Nivel:** {level_names[level]}\n\n{'‚ö†Ô∏è El efecto se aplicar√° en la pr√≥xima canci√≥n' if level > 0 else '‚úÖ Audio normal restaurado'}",
        color=0xff6600 if level > 0 else 0x00ff00
    )
    file = discord.File("nanali.jpg", filename="nanali.jpg")
    embed.set_thumbnail(url="attachment://nanali.jpg")
    embed.set_footer(text="¬°Configuraci√≥n guardada! ‚Ä¢ Nanali Music Bot", icon_url="attachment://nanali.jpg")
    await ctx.send(file=file, embed=embed)

# Ejecutar el bot
if __name__ == "__main__":
    token = os.getenv('DISCORD_TOKEN')
    if not token:
        print("‚ùå Error: No se encontr√≥ el token de Discord. Crea un archivo .env con DISCORD_TOKEN=tu_token")
    else:
        bot.run(token)